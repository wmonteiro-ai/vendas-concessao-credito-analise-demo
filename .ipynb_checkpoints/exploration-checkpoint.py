import asyncio
loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)

##########
#Imports
##########
import streamlit as st
import pandas as pd
import numpy as np
import pickle

import plotly.express as px
import plotly.graph_objects as go
import plotly.figure_factory as ff

from scipy.stats import kendalltau

import seaborn as sns
import matplotlib.pyplot as plt

##########
#Configura√ß√£o do Streamlit
##########
st.set_page_config(page_title='Inteledge - An√°lise de Cr√©dito', page_icon="üí°", layout="centered", initial_sidebar_state="auto", menu_items=None)

sns.set_context("talk")

##########
#Fun√ß√µes auxiliares
##########
@st.cache(allow_output_mutation=True)
def get_samples(target):
    # carregando uma amostra da base de dados
    df = pickle.load(open('df_resampled.pkl', 'rb'))
    columns = [target] + df.drop(target, axis=1).columns.tolist()
	
    return df

def calculate_corr(df, method='kendall'):
    if method != 'kendall':
        df = df.select_dtypes('number')
        return df.corr(method=method)
        
    correlations = []

    for col in df.columns:
        correlation_row = []
        for row in df.columns:
            correlation_row.append(kendalltau(df[row], df[col]).correlation)

        correlations.append(correlation_row)

    return pd.DataFrame(correlations, columns=df.columns, index=df.columns).fillna(0)

##########
#Preparando o simulador
##########
# carregando uma amostra da base de dados
target = 'Aprovar o cr√©dito?'
df = get_samples(target)

##########
#Se√ß√£o 1 - Cabe√ßalho
##########
col1, _, _ = st.columns(3)
with col1:
    st.image('inteledge.png')

st.title('Analytics para Dados de Cr√©dito')
st.markdown('O nosso trabalho n√£o se resume a apenas criar algoritmos de Intelig√™ncia Artificial ou de gerar gr√°ficos bonitos por si s√≥, mas tamb√©m o de gerar *insights* para voc√™. Abaixo voc√™ pode ver alguns exemplos do tipo de conhecimento que podemos trazer ao analisar os dados.')
st.markdown('Entenda os gr√°ficos abaixo como exemplos, somente: existem v√°rias possibilidades de an√°lise de dados e determinamos as t√©cnicas que fazem mais sentido especificamente para a base de dados que voc√™ possui. Ficou interessado? Entre em contato conosco e nos siga em [@inteledge.lab](https://instagram.com/inteledge.lab) no Instagram!')
st.markdown('Tamb√©m [veja o simulador que constru√≠mos com IA para esta base de dados](https://share.streamlit.io/wmonteiro92/vendas-concessao-credito-xai-demo/main/predictions_xai.py).')

# Amostra
st.header('Amostra da base de dados')
st.dataframe(df.replace({target: {1: 'Aprovado', 0: 'Reprovado'}}).sample(100))

##########
#Se√ß√£o 2 - Correla√ß√µes
##########
st.header('Correla√ß√µes')
st.write('Existem v√°rias colunas: algumas delas s√£o num√©ricas (como idade e valores) e outras s√£o categ√≥ricas. E, na vida real, nem sempre as correla√ß√µes s√£o perfeitamente lineares e envolvem n√∫meros. Para isso, utilizamos a correla√ß√£o de Kendall para encontrar esses relacionamentos entre categorias, grupos e valores. Interpretamos assim:')
"""
* Valores acima de `+0.30`: correla√ß√£o forte - quando um aumenta, o outro aumenta;
* Valores abaixo de `-0.30`: correla√ß√£o forte - quando um aumenta, o outro diminui.
"""

df_corr = calculate_corr(df, method='kendall').round(2)
df_corr = df_corr.replace({1: np.nan})
cols = df_corr.rename(columns={'Tempo morando na resid√™ncia atual': 'Tempo na resid. atual', 'N√∫mero de empr√©stimos passados': 'N¬∫ empr√©stimos passados'}).columns.tolist()

fig = px.imshow(df_corr, labels=dict(color="Correla√ß√£o"),
                x=cols,
                y=cols,
                text_auto=True
               )
fig.update_xaxes(side="top")
fig.update_layout(width=600, height=600)
st.plotly_chart(fig)

st.write('Passe o mouse (ou toque, se estiver no celular) nos quadrados. Veja que existem alguns deles com uma cor diferente dos demais. Vamos analisar algumas dessas combina√ß√µes de uma forma mais aprofundada agora.')

##########
#Se√ß√£o 3 - Investigando correla√ß√µes
##########
st.header('Valor pedido x Motivo do empr√©stimo')
st.markdown('No gr√°fico anterior vimos que h√° uma alta correla√ß√£o entre o `Valor pedido` e o `Motivo do empr√©stimo`. Veja a diferen√ßa entre os diferentes motivos de empr√©stimo abaixo: os valores de empr√©stimo para uma casa s√£o bem maiores do que aqueles para m√≥veis, por exemplo.')
st.markdown('Voc√™ pode interagir com o gr√°fico abaixo √† vontade ao ligar e desligar diferentes motivos de empr√©stimo. Pode tamb√©m dar zoom e passar o mouse (ou tocar, caso esteja com um celular) nos diferentes motivos para ver mais detalhes. Observe tamb√©m os riscos acima dos gr√°ficos: cada risco representa um cliente, e podemos ver de outra maneira a distribui√ß√£o entre eles. Legal, n√£o √©?')

# Histograma
fig = px.histogram(df.replace({target: {1: 'Aprovado', 0: 'Reprovado'}}),
                   x='Valor pedido', color='Motivo do empr√©stimo',
                   marginal='rug', facet_col=target)
fig.update_layout(xaxis_title='N√∫mero de clientes')
st.plotly_chart(fig)

st.header('Vis√£o multidimensional')
st.markdown('Tamb√©m conseguimos visualizar, ao mesmo tempo, a rela√ß√£o de diferentes dados. Como exemplo, temos aqui algumas categorias que tiveram alta correla√ß√£o com a aprova√ß√£o do cr√©dito (ou n√£o). Veja que realmente existem categorias em que predominam mais aprova√ß√µes do que reprova√ß√µes, e vice-versa. Isso nos ajuda a entender melhor os relacionamentos desses dados. Fique √† vontade para interagir com o gr√°fico.')
# Coordenadas paralelas
dimensions = []
for col in ['Saldo na conta', 'Hist√≥rico de empr√©stimos', '√â estrangeiro?', 'Motivo do empr√©stimo']:
    dimensions.append(go.parcats.Dimension(
        values=df[col].values,
        label=col
    ))

dimensions.append(go.parcats.Dimension(
    values=df['Aprovar o cr√©dito?'].values,
    label='Aprovar o cr√©dito?',
    categoryarray=[0, 1],
    ticktext=['Reprovado', 'Aprovado']
))

colorscale = [[0, '#92017D'], [1, '#0167CD']];
fig = go.Figure(data=[go.Parcats(dimensions=dimensions,
                                 line={'color': df['Aprovar o cr√©dito?'],
                                       'colorscale': colorscale},
                                 hoveron='color', hoverinfo='count+probability')])
st.plotly_chart(fig)

# Violin plot
st.markdown('Tamb√©m conseguimos ver o relacionamento dos dados num√©ricos. Aqui, por exemplo, vemos a distribui√ß√£o entre n√∫mero de parcelas x aprova√ß√£o (ou n√£o) do cr√©dito. Perceba que h√° uma *distribui√ß√£o* maior de reprova√ß√µes quanto maior √© o n√∫mero de parcelas.')
fig = px.violin(df.replace({target: {0: 'Reprovado', 1: 'Aprovado'}}),
          y='N√∫mero de parcelas',
          x=target,
          box=True,
          color=target)
fig.update_layout(showlegend=False)
st.plotly_chart(fig)

# Pairplot
st.markdown('Se quiser, tamb√©m podemos ver v√°rios desses relacionamentos ao mesmo tempo com v√°rias colunas. Veja que nem todos os dados s√£o bem divididos: n√£o h√° uma linha divis√≥ria entre o que √© aprova√ß√£o e o que √© reprova√ß√£o, e tudo est√° bem misturado. Isto pode se assemelhar muito com os seus pr√≥prios dados: mesmo assim, conseguimos criar bons modelos de IA para prever resultados.')
st.pyplot(sns.pairplot(data=df, plot_kws={'alpha': 0.1}, hue=target))

# Distribui√ß√£o dos dados categ√≥ricos
st.header('Dados categ√≥ricos')
st.markdown('Tamb√©m conseguimos ver facilmente a *distribui√ß√£o* de diferentes dados categ√≥ricos. Pessoas com casa pr√≥pria podem ter o seu cr√©dito aprovado de forma mais f√°cil do que pessoas que somente tem um carro (ou nenhum bem), por exemplo.')
st.write('Note tamb√©m algumas coisas interessantes: desempregados possuem uma chance maior de terem o seu empr√©stimo aprovado do que os demais grupos - isto pode levantar uma quest√£o interessante: ser√° que temos poucos dados deste grupo? Ou este grupo possui outras caracter√≠sticas (como alguns bens) que facilitaram a tomada de decis√£o? Ou √© algum erro nos dados? √â este o tipo de pergunta e insight que queremos construir em conjunto.')

for col in df.select_dtypes('object').columns[-8:]:
    values_aprovado = pd.DataFrame(df[df[target]==1].groupby(col).count()[target]).reset_index(drop=False).values.T
    values_reprovado = pd.DataFrame(df[df[target]==0].groupby(col).count()[target]).reset_index(drop=False).values.T
    
    fig = go.Figure()
    fig.add_bar(x=values_aprovado[0], y=100*values_aprovado[1]/(values_aprovado[1]+values_reprovado[1]), name='Aprovado')
    fig.add_bar(x=values_reprovado[0], y=100*values_reprovado[1]/(values_aprovado[1]+values_reprovado[1]), name='Reprovado')
    fig.update_layout(barmode="relative", title=f'Distribui√ß√£o dos dados para "{col}"')
    st.plotly_chart(fig)
    
st.markdown('Siga-nos no Instagram! [@inteledge.lab](https://instagram.com/inteledge.lab)')